@mixin border-radius($val) {
    border-radius: $val;
}

@mixin border-radius-top($val) {
    border-top-left-radius: $val;
    border-top-right-radius: $val;
}

@mixin border-radius-left($val) {
    border-top-left-radius: $val;
    border-bottom-left-radius: $val;
}

@mixin background-gradient-left2right($start-color, $end-color) {
    background-color: $start-color;
    background-image: -webkit-linear-gradient(left, $start-color, $end-color);
    background-image: -moz-linear-gradient(left, $start-color, $end-color);
    background-image: -ms-linear-gradient(left, $start-color, $end-color);
    background-image: -o-linear-gradient(left, $start-color, $end-color);
    background-image: linear-gradient(to right, $start-color, $end-color);
    filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$start-color}', endColorStr='#{$end-color}', gradientType='1');
}

@mixin background-gradient-top2bottom($start-color, $end-color) {
    background-color: $start-color;
    background-image: -webkit-gradient(linear, left top, left bottom, from($start-color), to($end-color));
    background-image: -webkit-linear-gradient(top, $start-color, $end-color);
    background-image:    -moz-linear-gradient(top, $start-color, $end-color);
    background-image:     -ms-linear-gradient(top, $start-color, $end-color);
    background-image:      -o-linear-gradient(top, $start-color, $end-color);
    background-image:         linear-gradient(to bottom, $start-color, $end-color);
    filter:            progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$start-color}', endColorstr='#{$end-color}');
}

@mixin rotate($deg) {
    transform: rotate($deg);
}

@mixin transition($transition...) {
    transition:         $transition;
}

@mixin transform($transform...) {
    transform:         $transform;
}

@mixin animation($animation...) {
  animation: $animation;
}

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

@keyframes pulse {
    0% {
        background-color: rgba(165, 165, 165, 0.1)
    }
    50% {
        background-color: rgba(165, 165, 165, 0.3)
    }
    100% {
        background-color: rgba(165, 165, 165, 0.1)
    }
}

@mixin clearfix() {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}

@mixin shadow($value...) {
    box-shadow: $value;
}

@mixin user-select($value...) {
    user-select: $value;
}

/* Flex */
@mixin flex() {
    display: flex;
}

@mixin flex-direction-row() {
  flex-direction: row;
}

@mixin flex-direction-column() {
  flex-direction: column;
}

@mixin flex-justify-center() {
  justify-content: center;
}

@mixin flex-justify-between() {
  justify-content: space-between;
}

@mixin flex-align-center() {
  align-items: center;
}

@mixin flex-align-start() {
    align-items: flex-start;
}

@mixin flex-align-end() {
    align-items: flex-end;
}

@mixin flex-justify-start() {
  justify-content: flex-start;
}

@mixin flex-justify-end() {
    justify-content: flex-end;
}

@mixin flex-center() {
    @include flex();
    @include flex-align-center();
    @include flex-justify-center();
}

@mixin focus() {
    &:focus {
        z-index: 1;
        outline: 0 none;
        @include transition(box-shadow .3s);
        @include shadow(inset 0 0 0 0.2em #00c4e8);
    }
}

@mixin link($hasChildSelector: false) {
    @if $hasChildSelector {
        > a, > .p-link {
            @content;
        }
    } @else {
        a, .p-link {
            @content;
        }
    }
}
